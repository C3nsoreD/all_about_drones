"""
The drone object is a simulation of a real drone.
 - it should be able to move follow paths generated by the server
 - it should be able to connect to other drones.
 - it should be able to stop at points specificied by the server

"""
import socket
import random

address = ('localhost', 9999)
# Client to connect to server
# soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# soc.connect(address)
#
# # Send message
# message = b'I am drone 2'
#
# print(f"Sending: {message}")
#
# len_sent = soc.send(message)
# recived = str(soc.recv(1024), 'utf-8')

class Drone:
    def __init__(self, addr):
        self._id = self._get_id()
        self._addr = addr
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self._message = bytes(f"I am drone {self._id}", encoding='utf-8')


    def _data(self):
        """
        Function that generates data from drone
        """
        pass

    def connect(self):
        try:
            self.soc.connect(self._addr)
        except socket.error as e:
            print(f"Could not connect: {e}")

    def send_data(self):
        try:
            # self.soc.connect(self._addr)
            print("# Trying to send data......")
            # data = self._data()
            self.soc.send(self._message)
        except socket.error as e:
            print(f"Error sending data {e}")
        print("# Data sent ... ")

    def recieved(self):
        """
        Function that will recive commands
        """
        rec = str(self.soc.recv(3000), encoding='utf-8')
        return rec

    def _get_id(self):
        """ Generates a random number
        """
        random.seed()
        return random.randint(1000, 9999)

    def __str__(self):
        return f"Drone with id {self._id}"


if __name__ == "__main__":
    d1 = Drone(address)
    d1.connect()
    d1.send_data()

    print(d1.recieved())

    print(d1)
